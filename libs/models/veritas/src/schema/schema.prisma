generator client {
  provider = "prisma-client-js"
  output   = "../lib/prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("VERITAS_DB")
}

model Category {
  id        Int               @id @default(autoincrement())
  name      String            @db.VarChar(128)
  enabled   Boolean           @default(true)
  createdAt DateTime          @default(now()) @db.DateTime(0)
  updatedAt DateTime          @updatedAt
  deletedAt DateTime?         @db.DateTime(0)
  profiles  CategoryProfile[]
  meets     Meet[]
}

model CategoryProfile {
  categoryId Int
  profileId  Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, map: "CategoryProfile_ibfk_1")
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade, map: "CategoryProfile_ibfk_2")

  @@id([categoryId, profileId])
  @@index([categoryId], map: "fk_CategoryProfile_Category1_idx")
  @@index([profileId], map: "fk_CategoryProfile_Profile1_idx")
}

model Meet {
  id            Int            @id @default(autoincrement())
  profileId     Int
  title         String         @db.VarChar(128)
  description   String         @db.VarChar(512)
  startAt       DateTime       @db.DateTime(0)
  endAt         DateTime?      @db.DateTime(0)
  recurrent     Boolean        @default(false)
  enabled       Boolean?       @default(true)
  hasEnded      Boolean?       @default(false)
  followCount   Int            @default(0)
  bannerUrl     String?        @db.VarChar(4096)
  createdAt     DateTime       @default(now()) @db.DateTime(0)
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?      @db.DateTime(0)
  categoryId    Int
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade, map: "Meet_ibfk_1")
  profile       Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade, map: "Meet_ibfk_2")
  platforms     MeetPlatform[]
  tags          MeetTag[]
  subscriptions Subscription[]

  @@index([categoryId], map: "fk_Meet_Category1_idx")
  @@index([profileId], map: "fk_Meet_Profile1_idx")
}

model MeetPlatform {
  meetId     Int
  platformId Int
  meet       Meet     @relation(fields: [meetId], references: [id], onDelete: Cascade, map: "MeetPlatform_ibfk_1")
  platform   Platform @relation(fields: [platformId], references: [id], onDelete: Cascade, map: "MeetPlatform_ibfk_2")

  @@id([meetId, platformId])
  @@index([meetId], map: "fk_MeetPlatform_Meet1_idx")
  @@index([platformId], map: "fk_MeetPlatform_Platform1_idx")
}

model MeetTag {
  meetId    Int
  tagId     Int
  typedName String   @db.VarChar(128)
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @updatedAt
  meet      Meet     @relation(fields: [meetId], references: [id], onDelete: Cascade, map: "MeetTag_ibfk_1")
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade, map: "MeetTag_ibfk_2")

  @@id([meetId, tagId])
  @@index([meetId], map: "fk_MeetTag_Meet1_idx")
  @@index([tagId], map: "fk_MeetTag_Tag1_idx")
}

model Platform {
  id           Int            @id @unique(map: "Platform.id_unique") @default(autoincrement())
  name         String         @db.VarChar(128)
  platformLink String         @db.VarChar(128)
  icon         String?        @db.VarChar(128)
  meets        MeetPlatform[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?      @db.DateTime(0)
}

model Follow {
  profileId         Int
  followProfileId   Int
  createdAt         DateTime  @default(now()) @db.DateTime(0)
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime? @db.DateTime(0)
  followingProfile  Profile   @relation("Following", fields: [followProfileId], references: [id], onDelete: Cascade)
  followedByProfile Profile   @relation("followedBy", fields: [profileId], references: [id], onDelete: Cascade)

  @@id([profileId, followProfileId])
  @@index([profileId], map: "fk_ProfileProfile_Profile1_idx")
  @@index([followProfileId], map: "fk_ProfileProfile_Profile2_idx")
}

model Profile {
  id            Int               @id @default(autoincrement())
  name          String?           @db.VarChar(64)
  secondName    String?           @db.VarChar(64)
  description   String?           @db.VarChar(512)
  profileImage  String?           @db.VarChar(128)
  createdAt     DateTime?         @default(now()) @db.DateTime(0)
  updatedAt     DateTime          @updatedAt
  deletedAt     DateTime?         @db.DateTime(0)
  userId        String            @db.VarChar(36)
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_Profile_User1")
  categories    CategoryProfile[]
  meets         Meet[]
  subscriptions Subscription[]
  follows       Follow[]          @relation("Following")
  followers     Follow[]          @relation("followedBy")

  @@index([userId], map: "fk_Profile_User1_idx")
}

model Subscription {
  profileId Int
  meetId    Int
  meet      Meet    @relation(fields: [meetId], references: [id], onDelete: Cascade, map: "Subscription_ibfk_1")
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade, map: "Subscription_ibfk_2")

  @@id([profileId, meetId])
  @@index([meetId], map: "fk_ProfileMeet_Meet1_idx")
  @@index([profileId], map: "fk_ProfileMeet_Profile1_idx")
}

model Tag {
  id        Int       @id @unique(map: "Tag.id_unique") @default(autoincrement())
  name      String    @unique @db.VarChar(128)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @updatedAt
  meets     MeetTag[]
}

model User {
  id        String   @id @unique(map: "id_UNIQUE") @db.VarChar(36)
  email     String   @unique(map: "User.email_unique") @db.VarChar(128)
  password  String   @db.VarChar(128)
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @updatedAt
  profile   Profile?
}
